<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="100%" height="100%" xmlns:app="ro.calin.app.*" xmlns:model="ro.calin.component.model.*" xmlns:component="ro.calin.component.*"
			   backgroundColor="black">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import ro.calin.component.Menu;
			import ro.calin.component.Registry;
			import ro.calin.component.Subcategory;
			import ro.calin.component.event.LoadingEvent;
			import ro.calin.component.model.CategoryViewerModel;
			import ro.calin.component.model.PictureViewerModel;
			import ro.calin.component.model.SubcategoryModel;
			import ro.calin.utils.SWFProfiler;
			
			import spark.core.ContentCache;
			
			private var wallpaperUrls:Array;
			private var subcategoryUrls:Array = [];
			
			private var wallpapers:PictureViewerModel;

			protected function configService_resultHandler(event:ResultEvent):void
			{
				var xml:XML = event.result as XML;
				
				var categories:ArrayList = parseCategories(xml.categories[0].category);
				//link external with internal(attach categories to 'gallery' menu entry)
				model.entries.getItemAt(0).entries = categories;
				
				wallpapers = parseWallpapers(xml.wallpapers[0]);

				
				var loader:ContentCache = new ContentCache();
				loader.enableQueueing = true;
				loader.maxActiveRequests = 4;
				//todo: move to app?
				Registry.instance.register(App.WALLPAPERS, loader); //for viewer
				Registry.instance.register(Subcategory.IMAGE_LOADER_NAME, loader); //for subcategory
				Registry.instance.register(Menu.IMAGE_LOADER_NAME, loader); //for menu
				
				//prioritize logo and one random wallpaper
				var preloadAtStartupPicUrls:Array = [];
				preloadAtStartupPicUrls.push(model.logoUrl);
				preloadAtStartupPicUrls.push.apply(null, wallpaperUrls);
				preloadAtStartupPicUrls.push.apply(null, subcategoryUrls);
				progressBar.load(loader, preloadAtStartupPicUrls, [0, 1]);
				
				progressBar.addEventListener(LoadingEvent.PRIORITY_LOAD_COMPLETE, startApp);
			}
			
			private function startApp(event:LoadingEvent):void {
				var app:App = new App(model, wallpapers, progressBar);
				app.percentHeight = 100;
				app.percentWidth = 100;
				addElementAt(app, 0);
				progressBar.removeEventListener(LoadingEvent.PRIORITY_LOAD_COMPLETE, startApp);
			}

			protected function configService_faultHandler(event:FaultEvent):void
			{
				Alert.show("Error! Data is unavailable!");
			}
			
			private function parseCategories(categories:XMLList):ArrayList {
				var categoryList:ArrayList = new ArrayList();

				var idx:Number = 0;
				for each (var category:XML in categories) {
					var model:MenuEntryModel = new MenuEntryModel();
					model.label = category.@name;
					model.color = uint(category.@color);
					
					var submodel:Object = null;
					if(category.subcategory.length() > 0) {
						submodel = new CategoryViewerModel();
						submodel.subcategories = parseSubcategories(category.subcategory);
						submodel.extra = idx; //map categories to their index in the menu (to know where to put the categviewer)
					} else if(category.picture.length() > 0) {
						submodel = new PictureViewerModel();
						submodel.pictures = parsePictures(category.picture);
					}
					
					idx++;
					
					model.extra = submodel;
					categoryList.addItem(model);
				}
				
				return categoryList;
			}
			
			private function parseSubcategories(subcategories:XMLList):ArrayList {
				var subcategoryList:ArrayList = new ArrayList();
				
				for each (var subcategory:XML in subcategories) {
					var model:SubcategoryModel = new SubcategoryModel();
					model.name = subcategory.@name;
					model.description = subcategory.@description;
					model.picUrl = subcategory.@picUrl;
					
					//gather url list for preloading
					subcategoryUrls.push(model.picUrl);
					
					var pictureModel:PictureViewerModel = new PictureViewerModel();
					pictureModel.pictures = parsePictures(subcategory.picture); 
					model.extra = pictureModel;
					subcategoryList.addItem(model);
				}
				
				return subcategoryList;
			}
			
			private function parseWallpapers(wallpaperList:XML):PictureViewerModel {
				var model:PictureViewerModel = new PictureViewerModel();
				
				model.pictures = parsePictures(wallpaperList.picture);
				
				//make the first wallpaper random
				var rnd:int = Math.floor(Math.random() * (model.pictures.length - 1)) + 1;
				var tmp:String = model.pictures[0];
				model.pictures[0] = model.pictures[rnd];
				model.pictures[rnd] = tmp;
				
				//gather url list for preloading
				wallpaperUrls = model.pictures;
				
				return model;
			}
			
			private function parsePictures(pictures:XMLList):Array {
				var pictureList:Array = new Array();
				
				for each (var picture:XML in pictures) {
					pictureList.push(picture.@url.toString());
				}
				
				return pictureList;
			}

		]]>
	</fx:Script>
	
	<s:applicationComplete>
		<![CDATA[
			configService.send();
			SWFProfiler.init(stage, this);
		]]>
	</s:applicationComplete>
	
	<fx:Declarations>
		<!-- Used to get external model. This service requests the xml config. -->
		<s:HTTPService id="configService" url="config.xml" result="configService_resultHandler(event)"
					   fault="configService_faultHandler(event)" resultFormat="e4x"/>
		
		<!-- Declare internal model -->
		<model:MenuModel id="model" alpha="0.5" buttonWidth="220" extra="{App.MENU_MIDDLE}" logoUrl="logo.jpg">
			<model:entries>
				<s:ArrayList>
					<model:MenuEntryModel label="gallery" extra="{App.MENU_BOTTOM}">
					</model:MenuEntryModel>
					<model:MenuEntryModel label="info" extra="{App.MENU_TOP}">
						<model:entries>
							<s:ArrayList>
								<model:MenuEntryModel label="blog" extra="{new URLRequest('http://mariusstoianov.wordpress.com/')}">
								</model:MenuEntryModel>
								<model:MenuEntryModel label="contact">
								</model:MenuEntryModel>
								<model:MenuEntryModel label="about" extra="{about}"/>
								<model:MenuEntryModel label="friends">
								</model:MenuEntryModel>
							</s:ArrayList>
						</model:entries>
					</model:MenuEntryModel>
					<model:MenuEntryModel label="share" extra="{App.MENU_TOP}">
						<model:entries>
							<s:ArrayList>
								<model:MenuEntryModel label="facebook" imageSrc="@Embed(source='assets/fb.gif')" 
													  extra="{new URLRequest('http://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.stoianov.ro%2F')}">
								</model:MenuEntryModel>
								<model:MenuEntryModel label="like on facebook" imageSrc="@Embed(source='assets/fbl.png')">
								</model:MenuEntryModel>
							</s:ArrayList>
						</model:entries>
					</model:MenuEntryModel>
				</s:ArrayList>
			</model:entries>
		</model:MenuModel>
		
		<fx:Array id="about">
			<model:PictureViewerModel>
				<model:pictures>
					<!--TODO: move all static resources to static folder (logo, static pics)-->
					<fx:String>data/_MG_5493.jpg</fx:String>
				</model:pictures>
			</model:PictureViewerModel>
			
			<s:VGroup bottom="10" right="10">
				<mx:LinkButton label="mata" click="navigateToURL(new URLRequest('http://mata.com'))" />
				<mx:LinkButton label="tactu" click="navigateToURL(new URLRequest('http://tactu.com'))" />
			</s:VGroup>
		</fx:Array>
		
		<s:Fade id="pvFade" target="{progressBar}" duration="1200" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	
	<component:LoadingProgressBar id="progressBar" x="0" y="0" height="4" width="100%" visible="false" color="0xECD672" 
								  loadStart="{pvFade.play()}" loadComplete="{pvFade.play(null, true)}"/>
</s:Application>
