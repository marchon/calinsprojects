<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="100%" height="100%" xmlns:app="ro.calin.app.*" xmlns:model="ro.calin.component.model.*" xmlns:component="ro.calin.component.*"
			   backgroundColor="black">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import ro.calin.component.Menu;
			import ro.calin.component.Registry;
			import ro.calin.component.Subcategory;
			import ro.calin.component.event.LoadingEvent;
			import ro.calin.component.model.CategoryViewerModel;
			import ro.calin.component.model.PictureViewerModel;
			import ro.calin.component.model.SubcategoryModel;
			import ro.calin.utils.SWFProfiler;
			
			import spark.core.ContentCache;
			
			private var wallpaperUrls:Array;
			private var subcategoryUrls:Array = [];
			
			private var wallpapers:PictureViewerModel;
			private var pictureLists:Object = {};

			protected function configService_resultHandler(event:ResultEvent):void
			{
				var xml:XML = event.result as XML;
				
				var categories:ArrayList = parseCategories(xml.categories[0].category);
				//link external with internal(attach categories to 'gallery' menu entry)
				model.entries.getItemAt(0).entries = categories;
				
				wallpapers = parseWallpapers(xml.wallpapers[0]);

				
				var loader:ContentCache = new ContentCache();
				loader.enableQueueing = true;
				loader.maxActiveRequests = 4;
				//todo: move to app?
				Registry.instance.register(App.WALLPAPERS, loader); //for viewer
				Registry.instance.register(Subcategory.IMAGE_LOADER_NAME, loader); //for subcategory
				Registry.instance.register(Menu.IMAGE_LOADER_NAME, loader); //for menu
				
				//prioritize logo and one random wallpaper
				var preloadAtStartupPicUrls:Array = [];
				preloadAtStartupPicUrls.push(model.logoUrl);
				preloadAtStartupPicUrls.push.apply(null, wallpaperUrls);
				preloadAtStartupPicUrls.push.apply(null, subcategoryUrls);
				progressBar.load(loader, preloadAtStartupPicUrls, [0, 1]);
				
				progressBar.addEventListener(LoadingEvent.PRIORITY_LOAD_COMPLETE, startApp);
			}
			
			private function startApp(event:LoadingEvent):void {
				var app:App = new App(model, wallpapers, progressBar, pictureLists);
				app.percentHeight = 100;
				app.percentWidth = 100;
				addElementAt(app, 0);
				progressBar.removeEventListener(LoadingEvent.PRIORITY_LOAD_COMPLETE, startApp);
			}

			protected function configService_faultHandler(event:FaultEvent):void
			{
				Alert.show("Error! Data is unavailable!");
			}
			
			private function parseCategories(categories:XMLList):ArrayList {
				var categoryList:ArrayList = new ArrayList();

				var idx:Number = 0;
				for each (var category:XML in categories) {
					var model:MenuEntryModel = new MenuEntryModel();
					model.label = category.@name;
					model.color = uint(category.@color);
					
					var submodel:Object = null;
					if(category.subcategory.length() > 0) {
						submodel = new CategoryViewerModel();
						submodel.subcategories = parseSubcategories(category.subcategory);
						submodel.extra = idx; //map categories to their index in the menu (to know where to put the categviewer)
					} else if(category.picture.length() > 0) {
						submodel = new PictureViewerModel();
						submodel.pictures = parsePictures(category.picture);
						pictureLists[model.label] = submodel;
					}
					
					idx++;
					
					model.extra = submodel;
					categoryList.addItem(model);
				}
				
				return categoryList;
			}
			
			private function parseSubcategories(subcategories:XMLList):ArrayList {
				var subcategoryList:ArrayList = new ArrayList();
				
				for each (var subcategory:XML in subcategories) {
					var model:SubcategoryModel = new SubcategoryModel();
					model.name = subcategory.@name;
					model.description = subcategory.@description;
					model.picUrl = subcategory.@picUrl;
					
					//gather url list for preloading
					subcategoryUrls.push(model.picUrl);
					
					var pictureModel:PictureViewerModel = new PictureViewerModel();
					pictureModel.pictures = parsePictures(subcategory.picture); 
					model.extra = pictureModel;
					pictureLists[model.name] = pictureModel; //for urls
					subcategoryList.addItem(model);
				}
				
				return subcategoryList;
			}
			
			private function parseWallpapers(wallpaperList:XML):PictureViewerModel {
				var model:PictureViewerModel = new PictureViewerModel();
				
				model.pictures = parsePictures(wallpaperList.picture);
				
				//make the first wallpaper random
				var rnd:int = Math.floor(Math.random() * (model.pictures.length - 1)) + 1;
				var tmp:String = model.pictures[0];
				model.pictures[0] = model.pictures[rnd];
				model.pictures[rnd] = tmp;
				
				//gather url list for preloading
				wallpaperUrls = model.pictures;
				
				return model;
			}
			
			private function parsePictures(pictures:XMLList):Array {
				var pictureList:Array = new Array();
				
				for each (var picture:XML in pictures) {
					pictureList.push(picture.@url.toString());
				}
				
				return pictureList;
			}

		]]>
	</fx:Script>
	
	<s:applicationComplete>
		<![CDATA[
			configService.send();
//			SWFProfiler.init(stage, this);
		]]>
	</s:applicationComplete>
	
	<fx:Declarations>
		<!-- Used to get external model. This service requests the xml config. -->
		<s:HTTPService id="configService" url="config.xml" result="configService_resultHandler(event)"
					   fault="configService_faultHandler(event)" resultFormat="e4x"/>
		
		<!-- Declare internal model -->
		<model:MenuModel id="model" alpha="0.5" buttonWidth="220" extra="{App.MENU_MIDDLE}" logoUrl="static/logo.jpg">
			<model:entries>
				<s:ArrayList>
					<model:MenuEntryModel label="gallery" extra="{App.MENU_BOTTOM}" color="0xECD872">
					</model:MenuEntryModel>
					<model:MenuEntryModel label="info" extra="{App.MENU_TOP}" color="0x82CAFA">
						<model:entries>
							<s:ArrayList>
								<model:MenuEntryModel label="facebook page" extra="{new URLRequest('http://www.facebook.com/MariusStoianovPhotography')}" color="0x000000"/>
								<model:MenuEntryModel label="contact" extra="{contact}" color="0x413839"/>
								<model:MenuEntryModel label="about" extra="{about}" color="0x595454"/>
							</s:ArrayList>
						</model:entries>
					</model:MenuEntryModel>
					<model:MenuEntryModel label="facebook" color="0xFAAFBA" extra="{new URLRequest('http://www.facebook.com/MariusStoianovPhotography')}"/>
				</s:ArrayList>
			</model:entries>
		</model:MenuModel>
		
		<fx:Array id="contact">
			<model:PictureViewerModel>
				<model:pictures>
					<fx:String>static/contact.jpg</fx:String>
				</model:pictures>
			</model:PictureViewerModel>
			
			<s:Group height="100%" width="100%">
				<s:Rect width="287" height="100%" top="35">
					<s:fill>
						<s:SolidColor color="black" alpha="0.4"/>
					</s:fill>
				</s:Rect>
				<s:VGroup top="80" left="50" fontSize="18" color="white">
					<s:Label text="contact details:" />
					<s:Label text="e-mail:" />
					<s:Label text="marius@stoianov.ro" buttonMode="true" click="navigateToURL(new URLRequest('mailto:marius@stoianov.ro'), '_blank')"/>
					<s:Label text="marius.stoianov@gmail.com" buttonMode="true" click="navigateToURL(new URLRequest('mailto:marius.stoianov@gmail.com'), '_blank')"/>
					<s:Label text="telephone:" />
					<s:Label text="+40742053730" />
					<s:Label text="+40724762439" />
				</s:VGroup>
			</s:Group>
		</fx:Array>
		
		<fx:Array id="about">
			<model:PictureViewerModel>
				<model:pictures>
					<fx:String>static/about.jpg</fx:String>
				</model:pictures>
			</model:PictureViewerModel>
			
			<s:Group height="287" width="100%" top="35">
				<s:Rect height="100%" width="100%">
					<s:fill>
						<s:SolidColor color="black" alpha="0.4"/>
					</s:fill>
				</s:Rect>
				<s:VGroup verticalCenter="0" horizontalCenter="0" fontSize="16" color="white">
					<s:Label width="800" textAlign="justify">
						<s:text>Marius Stoianov, 25 de ani in iunie nascut in Bucuresti. In copilarie eram pasionat de desen, in special designul auto urmat de arhitectura, mai cochetam cu muzica electronica insa am ales sa continui ce nu a terminat tatal meu si anume fotografia. astfel am urmat cursurile facultatii de cinematografie si televiziune din cadrul universitatii media pro la sectia de imagine unde am dus la alt nivel fotografia  odata cu invatarea unor tehnici de iluminare. am inceput fotografia acum 6 ani dar aveam atractia inca de cand aveam voie sa "pun mana" pe aparatul tatalui meu. Am inceput cu fotografie de strada. Ca hobby-uri inca mai am desenul, colectionarea a diverse nimicuri si â€¦ un pic evident: fotografia! Nu pot sa spun anume pe cine admir in domeniul fotografiei (admir munca multora dar nu pot spune ca admir persoana) insa in domeniul mai general al imaginii as putea spune ca il admir pe Liviu Marghidan, profesorul si mentorul nostru din timpul facultatii. Desi eu nu ma axez numai pe un anumit gen de fotografie pot spune ca ultima sedinta foto cu portretele in apa as vrea sa o transform intr-o serie pe viitor. Experienta Fratelli cred ca se poate rezuma prin o mare familie care se distreaza in fiecare saptamana intr-un loc cu gust ramanand apoi cu amintiri frumoase in memorie dar si pentru totdeauna prin fotografiile noastre.
						</s:text>
					</s:Label>
				</s:VGroup>
			</s:Group>
		</fx:Array>
		
		<s:Fade id="pvFade" target="{progressBar}" duration="1200" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	
	<component:LoadingProgressBar id="progressBar" x="0" y="0" height="4" width="100%" visible="false" color="0xECD672" 
								  loadStart="{pvFade.play()}" loadComplete="{pvFade.play(null, true)}"/>
</s:Application>
