<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" 
			   minHeight="600" xmlns:component="ro.calin.component.*" 
			   xmlns:model="ro.calin.component.model.*" xmlns:appmodel="ro.calin.app.model.*" xmlns:utils="ro.calin.utils.*">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import org.hamcrest.mxml.object.Null;
			
			import ro.calin.app.model.Config;
			import ro.calin.app.model.TextModel;
			import ro.calin.component.event.CategoryEvent;
			import ro.calin.component.event.MenuEvent;
			import ro.calin.component.model.CategoryViewerModel;
			import ro.calin.component.model.PictureModel;
			import ro.calin.component.model.PictureViewerModel;
			import ro.calin.utils.SWFProfiler;
			import ro.calin.utils.XmlToObjectConverter;
			
			import spark.components.Label;
			
			/**
			 * Name of special pictureset which contains 
			 * references to pictures to be shown when not on gallery.
			 */
			private static const WALLPAPERS:String = "WALLPAPERS";
			
			private static const MENU_ACTION_CLICK:String = "click";
			private static const MENU_ACTION_HOVER:String = "hover";
			
			private static const MENU_ACTION_SLIDE:String = "slide";
			private static const MENU_ACTION_SLIDE_UP:String = "up";
			private static const MENU_ACTION_SLIDE_DOWN:String = "down";
			private static const MENU_ACTION_SLIDE_MIDDLE:String = "middle";
			
			private static const MENU_ACTION_CATEG:String = "categ";
			private static const MENU_ACTION_URL:String = "url";
			private static const MENU_ACTION_TEXT:String = "text";
			
			
			/**
			 * Called when config xml is received.
			 * Populate config from that.
			 */ 
			protected function configService_resultHandler(event:ResultEvent):void
			{
				var configXml:XML = XML(event.result);
				
				var converter:XmlToObjectConverter = new XmlToObjectConverter();
				
				converter.convertToObject(configXml, config);
				
				menu.model = config.menu;
				setPictureViewerRandomWallpaper();
			}
			
			/**
			 * Called when error occured in getting conf xml.
			 * Show error popup.
			 */ 
			protected function configService_faultHandler(event:FaultEvent):void
			{
				Alert.show("Connection error. Contact admin at calin014@gmail.com.");
				trace(ObjectUtil.toString(event.fault));				
			}
			
			/**
			 * Processes a menu action that looks like this:
			 * action = [slide|categ|url|text:value]
			 * value = [up/down/middle|random_string]
			 * 
			 */
			protected function processMenuAction(action:Array, event:MenuEvent=null) : void {
				if(!action || action.length != 2) throw new Error('Bad action.');
				
				if(textDisplay.parent != null) removeElement(textDisplay);
				
				switch(action[0]) {
					case MENU_ACTION_SLIDE:
						switch(action[1]) {
							case MENU_ACTION_SLIDE_UP:
								currentState = "menuTop";
								break;
							case MENU_ACTION_SLIDE_DOWN:
								currentState = "menuBottom";
								break;
							case MENU_ACTION_SLIDE_MIDDLE:
								currentState = "menuMiddle";
								break;
						}
						break;
					case MENU_ACTION_CATEG:
						//TODO: externalize hardcoded values
						if(event) showCategory(config.categories[action[1]], 271 + 220 * event.buttonIndex);
						break;
					case MENU_ACTION_TEXT:
						//create a new one, otherwise the props would not get resetted
						textDisplay = new Label();
						
						var textModel:TextModel = config.textset[action[1]] as TextModel;
						setPictureViewerWallpaper(textModel.bgUrl);
						
						textDisplay.text = textModel.content;
						
						for (var prop:String in textModel.style) {
							try {
								if(textDisplay.hasOwnProperty(prop)) {
									textDisplay[prop] = textModel.style[prop];
								} else {
									textDisplay.setStyle(prop, textModel.style[prop]);
								}
							} catch(e:Error) {
								trace("Error applying style " + prop, e);
							}
						}
						
						addElement(textDisplay);
						
						break;
					case MENU_ACTION_URL:
						navigateToURL(new URLRequest(action[1]));
						break;
				}
			}
			
			protected function showCategory(model:CategoryViewerModel, x:Number /*, y:Number ?? bottom??*/):void {
				catViewer.model = model;
				
				//dimension and position
				//if more thumbs then the screen can fit, height is screen height
				//else, height is determined by nb of pics and pic height.
				//TODO: externalize hardcoded values
				catViewer.height = Math.min(this.height - menu.height, 
					catViewer.model.subcategories.length * 119);
				catViewer.x = x;
				
				//TODO: use a nice fade in/out
				catViewer.visible = true;
				
				//hide when user move mouse away from category
				//TODO: also be sure to hide it when the user rolls out the button/menubar(can be a little tricky)
				catViewer.addEventListener(MouseEvent.ROLL_OUT, function(event:MouseEvent):void{
					catViewer.visible = false;
				});
			}

			
			/**
			 * Called when item in menu is clicked or hovered.
			 * Depending if action type corresponds with event type, it does something or not.
			 * 
			 * action_type = [click|hover:slide|categ|url|text:value]
			 */
			protected function menu_itemHandler(event:MenuEvent):void
			{
				var action:* = (event.entry.extra as String);
				
				if(!action) return;
				
				//TODO: speparator char (url problems???)
				action = action.split("//>");
				
				if((action[0] == MENU_ACTION_CLICK && event.type == MenuEvent.MENU_ITEM_CLICK) ||
					(action[0] == MENU_ACTION_HOVER && event.type == MenuEvent.MENU_ITEM_HOVER)) {
					(action as Array).shift();
					processMenuAction(action, event);
				}
			}
			
			/**
			 * Called when clicked on menu logo.
			 * Go back to menu state and randomize wallpaper.
			 */
			protected function menu_logoClickHandler(event:MenuEvent):void
			{
				var action:* = (config.menu.extra as String);
				
				if(!action) return;
				
				action = action.split("//>");
				(action as Array).shift();
				processMenuAction(action);
				
				catViewer.visible = false;
				setPictureViewerRandomWallpaper();
			}

			
			
			/**
			 * Called when clicked on subactegory.
			 * Hide category control and change picture viewer pics.
			 */
			protected function catViewer_categItemClickHandler(event:CategoryEvent):void
			{
				//TODO: refactor here + config.xml
				//pictureset reference is held in "extra" field of subcateg model
				var picset:String = (event.subcategory.extra as String).substr("pictureset:".length);
				picViewer.model = config.picturesets[picset];
				
				catViewer.visible = false;
			}
			
			
		
			/**
			 * Randomizes over wallpaper pictureset.
			 */
			private function setPictureViewerRandomWallpaper():void {
				var walls:Array = (config.picturesets[WALLPAPERS] as PictureViewerModel).pictures;
				var rand:int = Math.floor(Math.random() * walls.length);
				wallpaperModel.pictures[0] = walls[rand];
				picViewer.model = wallpaperModel;
			}
			
			private function setPictureViewerWallpaper(url:String):void {
				PictureModel(wallpaperModel.pictures[0]).url = url;
				picViewer.model = wallpaperModel;
			}


		]]>
	</fx:Script>
	
	<s:states>
		<!--Menu is in the middle, random wallpaper.-->
		<s:State name="menuMiddle"/>
		
		<!--Menu is up.-->
		<s:State name="menuTop"/>
		
		<!--Menu is down. -->
		<s:State name="menuBottom"/>
	</s:states>
	
	<s:transitions>
		<s:Transition toState="*">
			<s:Move target="{menu}" duration="300"/>
		</s:Transition>
	</s:transitions>
	
	<fx:Declarations>
		<!-- This service requests the xml config. -->
		<s:HTTPService id="configService" url="config.xml" result="configService_resultHandler(event)"
					   fault="configService_faultHandler(event)" resultFormat="e4x"/>
		
		<!-- Store the model in memory. -->
		<appmodel:Config id="config" />
		
		<!-- Reference to a label used to display text -->
		<s:Label id="textDisplay" />
		
		<!-- Modified each time to contain only one pic, the current wallpaper. -->
		<model:PictureViewerModel id="wallpaperModel">
			<model:pictures>
				<fx:Array>
				</fx:Array>
			</model:pictures>
		</model:PictureViewerModel>
	</fx:Declarations>
	
	<s:applicationComplete>
		<![CDATA[
			//TODO: use more often, find a way to remove on prod
			SWFProfiler.init(stage, this);
		
			//get the config xml
			configService.send();
		]]>
	</s:applicationComplete>
	
	
	<!--This is the whole app(3 components): menu, picture viewer, category viewer-->
	<component:PictureViewer id="picViewer" width="100%" height="100%">
		<component:bitmapProcessor>
			<utils:ScaleCropBitmapProcessor width="{this.width}" height="{this.height}"/>
		</component:bitmapProcessor>
	</component:PictureViewer>
	
	<component:Menu id="menu"
					itemClick="menu_itemHandler(event)" 
					itemHover="menu_itemHandler(event)"
					logoClick="menu_logoClickHandler(event)"
					width="100%" y.menuMiddle="{this.height * .7}" 
					y.menuTop="0" y.menuBottom="{this.height - menu.height}" />
	
	<component:CategoryViewer id="catViewer" visible="false" bottom="{menu.height}" 
							  thumbnailWidth="220" scale="1.2" 
							  categItemClick="catViewer_categItemClickHandler(event)"/>
	
</s:Application>
