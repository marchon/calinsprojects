// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    
	Not(in=instruction[15], out=ainst);
	Or(a=ainst, b=instruction[5], out=loada);
	Mux16(a=instruction, b=loopAlu, sel=instruction[15], out=addrOrAlu);
	ARegister(in=addrOrAlu, load=loada, out=outa, out[0..14]=addressM);
	
	And(a=instruction[15], b=instruction[4], out=loadD);
	DRegister(in=loopAlu, load=loadD, out=outd);
	
	Mux16(a=outa, b=inM, sel=instruction[12], out=MorA);
	
	ALU(x=outd, y=MorA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
		f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=outM, out=loopAlu);
	
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	Or(a=ng, b=zr, out=npz);
	Not(in=npz, out=pz);
	And(a=instruction[0], b=pz, out=l1);
	And(a=instruction[1], b=zr, out=l2);
	And(a=instruction[2], b=ng, out=l3);
	
	Or(a=l1, b=l2, out=l12);
	Or(a=l12, b=l3, out=l4);
	
	And(a=l4, b=instruction[15], out=loadPc);
	
	Not(in=loadPc, out=incPc);
	
	PC(in=outa, load=loadPc, inc=incPc, reset=reset, out[0..14]=pc);
}
