////Author///////////////////////////////////////////////////////////////////////////
//Calin Avasilcai
////Date/////////////////////////////////////////////////////////////////////////////
//Friday, November 09, 2007
////File/////////////////////////////////////////////////////////////////////////////
//TalkProtocol.h
/////////////////////////////////////////////////////////////////////////////////////


////Forword//////////////////////////////////////////////////////////////////////////
//This module defines a protocol of comunication between a Talk server and a Talk
//client and also contains an interface for both sides to use in order to transmit 
//data to eachother.
/////////////////////////////////////////////////////////////////////////////////////


////Dependencies/////////////////////////////////////////////////////////////////////
#include <winsock.h>
#include <vector>
using namespace std;
/////////////////////////////////////////////////////////////////////////////////////

////Defines//////////////////////////////////////////////////////////////////////////
#define WM_SOCKET_MESSAGE	(WM_USER + 5)
/////////////////////////////////////////////////////////////////////////////////////

////The interface////////////////////////////////////////////////////////////////////
//The procedureds the client/server must use for initializig/transmitting/receiving
//and closeing 
/////////////////////////////////////////////////////////////////////////////////////

////Initializig/Shuting Down/////////////////////////////////////////////////////////
BOOL TalkInitWinSock();
void TalkShutDownWinSock();
/////////////////////////////////////////////////////////////////////////////////////

////Connecting/Accepting Connection//////////////////////////////////////////////////
//Procedure TalkConnectToServer() tryes to connect to the server specified by 
//hostName and if succeded creates a socket and puts it on async mode, therefor 
//it will send messages to the window specified by windowHandle.
//Procedure TalkSetUpServerForAccept() sets up a listen socket to accept incoming
//clients. Procedure TalkOnAcceptConnection() must be called on FD_ACCEPT.
SOCKET TalkConnectToServer(const char *hostName, HWND windowHandle);

BOOL TalkSetUpServerForAccept(HWND windowHandle);
void TalkStopAccept();
SOCKET TalkOnAcceptConnection(SOCKET listenSocket);
/////////////////////////////////////////////////////////////////////////////////////

////Sending Message//////////////////////////////////////////////////////////////////
//This assumes a valid socket, and valid length of the data
//If the data exceeds the write buffer length then the remaining data is saved in 
//an internal buffer end will be send with the SendMessageOnFD_WRITE procedure.
//In order for that to happen, SendMessageOnFD_WRITE must be called on every 
//FD_WRITE message the WndProc will receive.
BOOL TalkSendMessage(SOCKET socket, const char *data, unsigned int length);
void TalkSendMessageOnFD_WRITE(SOCKET socket);
/////////////////////////////////////////////////////////////////////////////////////

////Receiving Message////////////////////////////////////////////////////////////////
//This procedure will be called upon FD_READ message with a valid socket(wParam).
//It will return a pointer to a vector object which contains pointers to all 
//the complete messages recieved(a message is a null-terminated array of bytes).
//Be sure to use the pointed memory right away because the next call will alter 
//tha data.
vector<char *> *TalkReceiveMessage(SOCKET socket);
/////////////////////////////////////////////////////////////////////////////////////

////Shutting Down connection/////////////////////////////////////////////////////////
void TalkShutDownConnection(SOCKET socket);
/////////////////////////////////////////////////////////////////////////////////////